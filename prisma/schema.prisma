generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  PARENT
}

enum ChildStatus {
  ABSENT
  PRESENT
  PICKUP_REQUESTED
  PICKED_UP
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  PICKED_UP
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  name        String
  role        Role     @default(PARENT)
  phoneNumber String?
  children    Child[]
  notifications Notification[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Child {
  id                String       @id @default(uuid())
  name              String
  parent            User         @relation(fields: [parentId], references: [id])
  parentId          String
  payments     Payment[]
  fees         Fee[]
  status            ChildStatus  @default(ABSENT)
  qrCode            String       @unique
  attendanceRecords Attendance[]
  notifications     Notification[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model Attendance {
 id           String           @id @default(uuid())
  childId      String
  child        Child            @relation(fields: [childId], references: [id])
  date         DateTime         @default(now())
  status       AttendanceStatus
  checkInTime  DateTime?
  checkOutTime DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@index([childId])
}
model Notification {
  id        String   @id @default(uuid())
  message   String
  type      String   // 'CHECK_IN' or 'PICK_UP'
  read      Boolean  @default(false)
  userId    String   // Admin who should receive this notification
  childId   String
  child     Child    @relation(fields: [childId], references: [id])
  parentId  String
  parent    User     @relation(fields: [parentId], references: [id])
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([childId])
  @@index([parentId])
}

enum PaymentStatus {
  PAID
  PENDING
  OVERDUE
}

model Payment {
  id            String    @id @default(uuid())
  childId       String
  child         Child     @relation(fields: [childId], references: [id])
  amount        Float
  description   String?
  paymentDate   DateTime  @default(now())
  receiptNumber String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([childId])
}

model Fee {
  id          String       @id @default(uuid())
  childId     String
  child       Child       @relation(fields: [childId], references: [id])
  totalAmount Float
  description String?
  startDate   DateTime
  endDate     DateTime
  installments Installment[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([childId])
}

model Installment {
  id          String            @id @default(uuid())
  feeId       String
  fee         Fee               @relation(fields: [feeId], references: [id])
  amount      Float
  dueDate     DateTime
  paidAmount  Float             @default(0)
  status      InstallmentStatus @default(PENDING)
  paidAt      DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([feeId])
}

enum InstallmentStatus {
  PAID
  PENDING
  OVERDUE
}